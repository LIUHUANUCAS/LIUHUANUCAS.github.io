(display "queue\n")
(define (displaynewline x)
    (display x)
    (newline)
)
(define (make-queue)
    ; (cons '() (cons '() '()))
    (cons '() '() )
)
(define (front-ptr queue)
    (car queue)
)

(define (rear-ptr queue)
    (cdr queue)
)
(define (empty-queue? queue)
    (null? (front-ptr queue))
)
(define (set-front-ptr! queue x)
    (set-car! queue x)
)
(define (set-rear-ptr! queue x)
    (set-cdr! queue x)
)

(define (front-queue q)
    (if (empty-queue? q) 
        (error "FRONT called with empty queue" q)
        (car (front-ptr q))
    )
)

(define (rear-queue queue)
    (if(empty-queue? queue)
        (error "REAR-QUEUE for empty queue")
        (car (rear-ptr queue))
    )
)

(define (insert-queue! queue x)
( let ((new-item (cons x '())))
    (cond 
        ((empty-queue? queue) 
            (set-front-ptr! queue new-item)
            (set-rear-ptr! queue new-item)
            queue
        )
        (else  
            (set-cdr! (rear-ptr queue) new-item)
            (set-rear-ptr! queue new-item)
            queue
        )
    )
)
)

(define (delete-queue! queue)
    (cond 
        (
            (empty-queue? queue) (error "DELETE-QUEUE error"))
            (else  
                (set-front-ptr! queue (cdr (front-ptr queue)))
        )
    )
)
; 3.21
(define (print-queue queue)
    (define (print-queue-iter q)
        (if (null? q)
            (displaynewline "]")
            (begin 
                (display (car q))
                (if (not (null? (cdr q)) )
                    (display " ")
                )
                (print-queue-iter (cdr q))
            )
        )
    )
    (display "[")
    (print-queue-iter (front-ptr queue))
)

(define (test-queue)
    (define q (make-queue))
    (displaynewline q)
    (insert-queue! q '1 )
    (insert-queue! q 2)
    (insert-queue! q 3)
    (print-queue q)
    (insert-queue! q 4)
    (insert-queue! q 5)
    (displaynewline q)
    (delete-queue! q )
    (displaynewline q)
    (print-queue q)

)
(test-queue)
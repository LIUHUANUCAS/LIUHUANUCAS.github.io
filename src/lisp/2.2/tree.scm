(display "tree \n")
; get list length 
(define (length items)
    (if (null? items)
        0
        (+ 1 (length (cdr items)))
    )
)
(define (count-leaves x)
  (cond ( (null? x) 0)
      ((not (pair? x)) 1)
      (else (+ (count-leaves (car x)) (count-leaves (cdr x))))
      )
)
(define (fringe x)
    (cond ((null? x) x)
        ((not (pair? x)) (list x))
        (else (append (fringe (car x)) (fringe (cdr x))))
        )
)

(define (displaynewline x)
    (display x)
    (newline)
)

(define list-one-four (list 1 2 3 4))
(define alist (list 1 2 3 4))
(define blist (list 1 4 9 16 25))
(define x (cons (list 1 2 ) (list 3 4)))
(displaynewline (length x))
(displaynewline x)
(displaynewline (list (list 1 2) 3 4 (list 5)))
(displaynewline (cons  3 4 ))
(displaynewline (cons 1 (list  3 4 )))
(displaynewline (cons 3 (cons 4 '())))
(displaynewline (count-leaves x))

(displaynewline (list (list 1 2) (list 3 4)))
(displaynewline (cons (list 1 2) (list 3 4)))
(displaynewline (cons (cons 1 2) (list 3 4)))
(displaynewline (cons 1 (cons 2 (cons 3 '())) ))

(displaynewline (list 1 (list  2 (list 3 4))))
(displaynewline  (list  2 (list 3 4)))

(displaynewline (car (cdr (car (cdr (cdr (list 1 3 (list 5 7) 9)) )))))
(displaynewline (car (car (list (list 7)))) )
(define third (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
; (displaynewline third)
(displaynewline   (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr third)))))))))))))
; (displaynewline   (cdr (cdr (cdr (cdr third)))))
(define x (list 1 2 3 ))
(define y (list 4 5 6 ))
(define (reverse x)
    (if (null? x)
        x
        (append (reverse (cdr x)) (list (car x)))
    )
)
(displaynewline (append x y ))
(displaynewline (cons x y ))
(define (deep-reverse x)
    (cond ( (null? x) x)
        ((not (pair? x) )  (list x))
        ((not (pair? (cdr   x)) ) (deep-reverse (car x)))
        ((not (pair? (car   x)) ) (deep-reverse (car x)))
        (else (append   (cons (deep-reverse (cdr (cdr x)) ) (deep-reverse   (car (cdr x))) )  (deep-reverse (car x))  ))
    )
)
(displaynewline (reverse x))
(displaynewline  (list x y ))

(displaynewline  (cdr   (list x y )))
(define x1 (list 0 (list 1 2) (list 3 4)))
(displaynewline  (fringe (list x1 x1)))
(displaynewline  (fringe x1))
(displaynewline "x")
(displaynewline x)
(displaynewline "y")
(displaynewline y)
; (displaynewline (deep-reverse  (list x y )))
(displaynewline "deep x")

(displaynewline (deep-reverse  x))
(displaynewline "deep y")
(displaynewline (deep-reverse  y))
(displaynewline "x1:")
(displaynewline x1)
(displaynewline (deep-reverse  x1))
(displaynewline (car x1))
(displaynewline (cdr (cdr x1)))



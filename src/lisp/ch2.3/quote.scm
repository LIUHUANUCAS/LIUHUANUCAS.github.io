(display "quote \n")
(define (equal? x y)
    (if (eq? x y) '#t 
     (and (pair? x) (pair? y ) (eq? (car x) (cdr y)) (eq? (cdr x) (cdr y)))
    )
)
(define (memq item x)
    (cond (
        (null? x) '#f)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)) )
    )
)
(define (displaynewline x)
    (display x)
    (newline)
)


(define a (list 'a 'b 'c 'e ) )
(displaynewline a)
(displaynewline (cdr '(a b c )))
(displaynewline (eq? '(a b) a))
(displaynewline (memq 'b a))
(displaynewline (memq 'apple '(pear banana prune)))
(displaynewline (memq 'apple '(x (apple sauce) y apple pear)))
(displaynewline (list  'a 'b 'c ))
(displaynewline (list  (list  'george )))
(displaynewline (cdr  '((x1 x2) (y1 y2))))
(displaynewline (cadr '((x1 x2) (y1 y2))))
(displaynewline (pair? (car '( a short list ))))
(displaynewline (memq 'red '((red shoes) (blue socks) )))
(displaynewline (memq 'red '(red shoes blue socks) ))
(displaynewline (eq? '(q) '()))
(displaynewline (equal? '(this is a list ) '(this (is a ) list )))
(displaynewline (equal? '(this a ) '(this (is a ) list )))
(displaynewline (equal? '(a) '(a b)))
(displaynewline (car ''abc) ) ;2.55
(displaynewline (car '(' ab bc)) )
(displaynewline (car (quote  ( quote ab bc) ) ));2.55


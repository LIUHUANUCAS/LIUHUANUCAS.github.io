(display "deriv \n")

(define (displaynewline x)
    (display x)
    (newline)
)
(define (deriv exp var )
    (cond 
    
        ((number? exp) 0)
        ( (variable? exp) 
            (if (same-variable? exp var) 1 0)
        )
        ((sum? exp)
            (make-sum (deriv (addend exp) var) (deriv (augend exp ) var))
        )
        ((product? exp)
            (make-sum 
                (make-product (multiplier exp) (deriv (multiplicand exp) var ))
                (make-product (deriv (multiplier exp) var ) (multiplicand exp))
            )
        )
        (else (error "unknow express"))
    )
)

(define (variable? x)
    (symbol? x)
)

(define (same-variable? x y)
    (and (variable? x ) (variable? y) (eq? x y))
)
(define (=number? x y )
    (and (number? x) (= x y))
)
(define (make-sum x y )
    (cond 
        ((=number? x 0) y)
        ((=number? y 0) x)
        ( (and (number? x) (number? y) (+ x y )))
        (else (list '+ x y))
    )
)
(define (make-product x y)
    (cond 
        ( (or (=number? x 0) (=number? y 0)) 0)
        ((=number? x 1) y)
        ((=number? y 1) x)
        ( (and (number? x) (number? y) (* x y )))
        (else  (list '* x y))
    )
)
(define (sum? x)
    (and (pair? x) (eq? (car x) '+))
)

(define (addend x)
    (cadr x)
)

(define (augend x)
    (caddr x)
)

(define (product? x)
    (and (pair? x) (eq? (car x) '* ))
)

(define (multiplier p)
    (cadr p)
)

(define (multiplicand x)
    (caddr x)
)

(displaynewline (deriv '(+ x 3) 'x))
(displaynewline (deriv '(* x y) 'x))
(displaynewline (deriv '(* (* x y) (+ x 3) )'x))
(displaynewline (multiplier '(* x y )))
(displaynewline (cadr '(* x y )))
(display "huffman tree\n")
(define (decode bits tree)
    (define (decode-1 bits current-branch)
        (if (null? bits)
            '()
            (
                let ((next-branch (choose-branch (car bits) current-branch)))
                (if (leaf? next-branch)
                    (cons (symbol-leaf next-branch) (decode-1 (cdr bits) tree))
                    (decode-1 (cdr bits) next-branch)
                )
            )
        )
    )
    (decode-1 bits tree)
)
(define (make-leaf-set pairs)
    (if (null? pairs)
        '()
        (
            let ((pair (car pairs)))
            (adjoin-set (make-leaf (car pair) (cadr pair))
                (make-leaf-set (cdr pairs))
            )
        )
    )
)


(define (adjoin-set x set)
    (cond 
        ((null? set) (list x))
        ((< (weight x ) (weight (car set))) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))
    )
)
(define (choose-branch bit branch)
    (cond 
        ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- Choose-Branch" bit ))
    )
)
(define (make-code-tree left right)
    (list 
        left right
        (append (symbol left ) (symbol right))
        (+ (weight left) (weight right))
    )
)

(define (symbol tree)
    (if (leaf? tree)
        (list (symbol-leaf tree))
        (caddr tree)
    )
)
(define (left-branch tree)
    (car tree)
)

(define (right-branch tree)
    (cadr tree)
)
(define (weight tree)
    (if (leaf? tree)
        (weight-leaf tree)
        (cadddr tree)
    )
)
(define (make-leaf symbol weight)
    (list 'leaf symbol weight)
)

(define (leaf? x)
    (eq? (car x) 'leaf )
)

(define (symbol-leaf x)
    (cadr x)
)

(define (weight-leaf x)
    (caddr x)
)

(define (displaynewline x)
  (display x)
  (newline)
)
(define x   (list (list 'A 4) (list 'B 2) (list 'C 1) (list 'D 1) ))
(define y   (list  (make-leaf 'A 4) (make-leaf 'B 2) (make-leaf 'C 1) (make-leaf 'D 1) ))
(displaynewline (make-leaf-set x))
(define z (make-leaf-set x))
; (displaynewline (make-left-set (list (list 'A 4) (list 'B 2) (list 'C 1) (list 'D 1) )))
(displaynewline x)
(displaynewline y)
(define simple-tree 
    z
)
(define simple-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(displaynewline (decode  simple-message simple-tree))
